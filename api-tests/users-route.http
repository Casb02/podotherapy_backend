### Get JWT token for admin, store it in a variable
POST {{url}}/auth/authenticate
Content-Type: application/json
Accept: application/json

{
  "username": "Admin",
  "password": "admin"
}

> {%
    client.global.set("token", response.body.token);
%}


### Get all patients users
GET {{url}}/users
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

> {%
    client.test("User route returns users" , function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
  %}

### Get all patients users (with no token)
GET {{url}}/users
Content-Type: application/json
Accept: application/json

> {%
    client.test("User route returns users" , function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
  %}

### Get patient ID 1
GET {{url}}/users/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

> {%
    client.test("User route returns user with ID 1" , function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
  %}

### Get patient ID 1 (with no token)
GET {{url}}/users/1
Content-Type: application/json
Accept: application/json

> {%
    client.test("User route returns user with ID 1" , function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Update patient ID 1
POST {{url}}/users/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "username": "Karel",
  "dateOfBirth": "19-09-2002",
  "gender": "MALE"
}

> {%
    client.test("User route updates user with ID 1" , function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Validate changes to patient ID 1
GET {{url}}/users/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

> {%
    client.test("User route returns user with ID 1" , function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.username === "Karel", "Username is not Karel");
        client.assert(response.body.dateOfBirth === "19-09-2002", "Date of birth is not 19-09-2002");
        client.assert(response.body.gender === "MALE", "Gender is not MALE");
    });
%}